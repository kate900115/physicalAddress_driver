#include "vadd.h"
__device__ int g_lock = 1;
	
extern "C" __global__ void vadd(float *A, float* B, float* C, int* d_lock){
	int j = blockIdx.x * blockDim.x + threadIdx.x;
	int i = blockIdx.y * blockDim.y + threadIdx.y;
	//if ((i==0)&&(j==0)) {g_lock = *d_lock;}
	while (g_lock!=0){
		// sleep for 10000 micro seconds
		clock_t start = clock();
		clock_t now;
		for (;;){
			now = clock();
			clock_t cycles = now > start? now - start : now+(0xffffffff - start);
			if (cycles >=100000000){
				break;
			}
		}
		if ((i==0)&&(j==0)) {g_lock = *d_lock;}
	
		printf("g_lock = %d\n", g_lock);
		//atomicCAS(&g_lock, 0,0);
	}

	//__syncthreads();


	if ((i<m)&&(j<n)) {
		C[i*n+j] = A[i*n+j]+B[i*n+j];
	}
}

